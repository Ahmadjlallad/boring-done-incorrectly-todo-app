{"version":3,"sources":["hooks/form.js","context/Settings.jsx","components/todo/List.jsx","components/todo/todo.jsx","components/Header.jsx","app.js","index.js"],"names":["useForm","callback","useState","values","setValues","handleChange","event","persist","console","log","target","name","value","handleSubmit","preventDefault","settingContext","React","createContext","settings","display","numberOfItems","defaultSortField","Settings","props","Provider","children","List","list","toggleComplete","setIncomplete","incomplete","useContext","pagination","setPagination","useEffect","incompleteCount","filter","item","complete","length","document","title","slice","map","interactive","elevation","Elevation","TWO","onClick","id","className","assignee","text","difficulty","number","btn","i","push","makePagination","ToDo","setList","uuid","Date","getTime","style","height","margin","width","marginTop","align","Alignment","LEFT","Heading","fontSize","onSubmit","helperText","FormGroup","FormGroupFor","FormGroupInfo","onChange","type","placeholder","defaultValue","min","max","items","Header","backgroundColor","App","Component","Main","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.e23f0f1c.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst useForm = (callback) => {\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n    callback(values);\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    console.log(event.target.name);\n    setValues((values) => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;\n","import React from \"react\";\nexport const settingContext = React.createContext();\nconst settings = {\n  display: true,\n  numberOfItems: 2,\n  defaultSortField: \"id\",\n};\nconst Settings = (props) => {\n  return (\n    <settingContext.Provider value={settings}>\n      {props.children}\n    </settingContext.Provider>\n  );\n};\n\nexport default Settings;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { settingContext } from \"../../context/Settings\";\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\n\nfunction List({ list, toggleComplete, setIncomplete, incomplete }) {\n  const settings = useContext(settingContext);\n  const [pagination, setPagination] = useState(settings.numberOfItems);\n  const makePagination = (list, number) => {\n    const btn = [];\n    for (let i = 0; i < list.length / number; i++) {\n      btn.push(\n        <Button\n          onClick={() => {\n            setPagination((i + 1) * number);\n          }}\n        >\n          {i + 1}\n        </Button>\n      );\n    }\n    return btn;\n  };\n  useEffect(() => {\n    let incompleteCount = list.filter((item) => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n  console.log(list);\n  return (\n    <div>\n      {list\n        .slice(pagination - settings.numberOfItems, pagination)\n        .map((item) => (\n          <Card interactive={true} elevation={Elevation.TWO} key={item.id}>\n            <div\n              onClick={() => toggleComplete(item.id)}\n              className={`${\n                item.complete ? \"Complete\" : \"notComplete\"\n              } isComplete`}\n            >\n              <span>{item.complete ? \"Complete\" : \"pending\"}</span>\n            </div>\n            <p className={\"assignee\"}>{item.assignee}</p>\n            <p className={\"task\"}>{item.text}</p>\n            <p className=\"Difficulty\">\n              <small>Difficulty: {item.difficulty}</small>\n            </p>\n          </Card>\n        ))}\n      <div>{makePagination(list, settings.numberOfItems)}</div>\n    </div>\n  );\n}\n\nexport default List;\n// * list = 100 items\n// * pag = 10 items\n// * current page = 1 = 10 items\n// * slice(0, 10)\n","import React, { useState } from \"react\";\nimport useForm from \"../../hooks/form.js\";\nimport \"./todo.scss\";\nimport { v4 as uuid } from \"uuid\";\nimport List from \"./List\";\nimport {\n  Alignment,\n  Button,\n  FormGroup,\n  InputGroup,\n  Navbar,\n} from \"@blueprintjs/core\";\n\nconst ToDo = () => {\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem);\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid() + new Date().getTime();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter((item) => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = list.map((item) => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n      return item;\n    });\n\n    setList(items);\n  }\n\n  return (\n    <>\n      <Navbar\n        className=\"bp3-navbar bp3-dark\"\n        style={{\n          height: \"4rem\",\n          margin: \"0 auto\",\n          width: \"80%\",\n          marginTop: \"1rem\",\n        }}\n        align={Alignment.LEFT}\n      >\n        <Navbar.Heading\n          className=\"bp3-navbar-group bp3-align-left\"\n          style={{ fontSize: \"1.5rem\" }}\n        >\n          To Do List: {incomplete} items pending\n        </Navbar.Heading>\n      </Navbar>\n      <div className=\"todo-container\">\n        <div className=\"todo-form\">\n          <form onSubmit={handleSubmit}>\n            <h2>Add To Do Item</h2>\n\n            <FormGroup\n              helperText=\"To Do Item details...\"\n              FormGroup=\"To Do Item\"\n              FormGroupFor=\"ToDoItem\"\n              FormGroupInfo=\"(required)\"\n            >\n              <span>To Do Item</span>\n              <InputGroup\n                id=\"ToDoItem\"\n                onChange={handleChange}\n                name=\"text\"\n                type=\"text\"\n                placeholder=\"Item Details\"\n              />\n            </FormGroup>\n\n            <FormGroup\n              helperText=\"Assigned To\"\n              FormGroup=\"Assigned To\"\n              FormGroupFor=\"Assigned To\"\n              FormGroupInfo=\"(required)\"\n            >\n              <InputGroup\n                onChange={handleChange}\n                name=\"assignee\"\n                type=\"text\"\n                placeholder=\"Assignee Name\"\n              />\n            </FormGroup>\n\n            <FormGroup\n              helperText=\"Difficulty\"\n              FormGroup=\"Difficulty\"\n              FormGroupFor=\"Difficulty\"\n              FormGroupInfo=\"(required)\"\n            >\n              <InputGroup\n                onChange={handleChange}\n                defaultValue={3}\n                type=\"range\"\n                min={1}\n                max={5}\n                name=\"difficulty\"\n              />\n            </FormGroup>\n\n            <Button type=\"submit\">Add Item</Button>\n          </form>\n        </div>\n        <div className=\"todo-list\">\n          <List\n            list={list}\n            toggleComplete={toggleComplete}\n            setIncomplete={setIncomplete}\n            incomplete={incomplete}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ToDo;\n","import { Alignment, Navbar } from \"@blueprintjs/core\";\nimport React from \"react\";\n\nfunction Header() {\n  return (\n    <Navbar\n      className=\"bp3-navbar\"\n      style={{ height: \"4rem\", backgroundColor: \"#227BFF\" }}\n      align={Alignment.LEFT}\n    >\n      <Navbar.Heading\n        className=\"bp3-navbar-group bp3-align-left\"\n        style={{ fontSize: \"1.5rem\" }}\n      >\n        home\n      </Navbar.Heading>\n    </Navbar>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport ToDo from \"./components/todo/todo\";\nimport Settings from \"./context/Settings\";\nimport \"./app.scss\";\nimport Header from \"./components/Header\";\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Settings>\n        <Header />\n        <ToDo />\n      </Settings>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}